
.division_name[data-v-54b5a836] {
    text-decoration: underline;
    color: red;
    text-align: center;
}


.quarter_final_block {
    margin-left: 1rem;
}
.quarter_final_full_info {
    margin-left: 1rem;
}


.quarter_final_header[data-v-336348ad] {
    margin-left: 1rem;
    text-decoration: underline;
}
.quarter_final_full_info[data-v-336348ad] {
    margin-left: 1rem;
}


#buttons-block[data-v-4bb162b4] {
  margin-left: 1rem;
}
#loadingImage[data-v-4bb162b4] {
  position: absolute;
  margin: 0 auto;
  width: 100%;
  top: 0;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/